@inproceedings{delaware:popl2013,
 author = {Delaware, Benjamin and d. S. Oliveira, Bruno C. and Schrijvers, Tom},
 title = {Meta-theory \`{a} La Carte},
 booktitle = {Proceedings of the 40th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '13},
 year = {2013},
 isbn = {978-1-4503-1832-7},
 location = {Rome, Italy},
 pages = {207--218},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2429069.2429094},
 doi = {10.1145/2429069.2429094},
 acmid = {2429094},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {coq, extensible church encodings, modular mechanized meta-theory},
}

@article{swierstra_2008,
  title={Data types à la carte},
  volume={18},
  DOI={10.1017/S0956796808006758},
  number={4},
  journal={Journal of Functional Programming},
  publisher={Cambridge University Press},
  author={SWIERSTRA, WOUTER},
  year={2008},
  pages={423–436}
 }

@inproceedings{delaware:oopsla2011,
 author = {Delaware, Benjamin and Cook, William and Batory, Don},
 title = {Product Lines of Theorems},
 booktitle = {Proceedings of the 2011 ACM International Conference on Object Oriented Programming Systems Languages and Applications},
 series = {OOPSLA '11},
 year = {2011},
 isbn = {978-1-4503-0940-0},
 location = {Portland, Oregon, USA},
 pages = {595--608},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2048066.2048113},
 doi = {10.1145/2048066.2048113},
 publisher = {ACM}
} 

@inproceedings{schaefer:aosd2011,
 author = {Schaefer, Ina and Bettini, Lorenzo and Damiani, Ferruccio},
 title = {Compositional Type-checking for Delta-oriented Programming},
 booktitle = {Proceedings of the Tenth International Conference on Aspect-oriented Software Development},
 series = {AOSD '11},
 year = {2011},
 isbn = {978-1-4503-0605-8},
 location = {Porto de Galinhas, Brazil},
 pages = {43--56},
 url = {http://doi.acm.org/10.1145/1960275.1960283},
 doi = {10.1145/1960275.1960283},
 publisher = {ACM}
} 


@inbook{kiczales:ecoop2001,
	Author = {Kiczales, Gregor and Hilsdale, Erik and Hugunin, Jim and Kersten, Mik and Palm, Jeffrey and Griswold, William G.},
	Booktitle = {ECOOP 2001 --- Object-Oriented Programming: 15th European Conference Budapest, Hungary, June 18--22, 2001 Proceedings},
	Doi = {10.1007/3-540-45337-7_18},
	Pages = {327--354},
	Publisher = {Springer Berlin Heidelberg},
	Title = {An Overview of AspectJ},
	Url = {https://doi.org/10.1007/3-540-45337-7_18},
	Year = {2001}
}

@article{alves:splc2005,
  title={Extracting and evolving mobile games product lines},
  author={Alves, Vander and Matos, Pedro and Cole, Leonardo and Borba, Paulo and Ramalho, Geber},
  journal={Software Product Lines},
  pages={70--81},
  year={2005},
  publisher={Springer Berlin/Heidelberg}
}

@inproceedings{kastner:icse2008, 
author={C. Kästner and S. Apel and M. Kuhlemann}, 
booktitle={2008 ACM/IEEE 30th International Conference on Software Engineering}, 
title={Granularity in software product lines}, 
year={2008}, 
pages={311-320}, 
keywords={software engineering;coarse granularity;code replication;colored IDE;software product lines;Computer science;Design engineering;Feature extraction;Informatics;Mathematics;Permission;Software design;Software tools;Spatial databases;Transaction databases;feature refactoring;ide;software product lines;virtual separation of concerns}, 
doi={10.1145/1368088.1368131}, 
ISSN={0270-5257}, 
month={May},}

@techreport{stallman:cpp,
 author ={Richard M. Stallman and Zachary Weinberg},
 title = {The C Preprocessor},
 institution = {Free Software Foundation},
 year = {2014},
 url = {https://gcc.gnu.org/onlinedocs/gcc-4.9.0/cpp.pdf}
}

@inproceedings{delaware:fse-2009,
 author = {Delaware, Benjamin and Cook, William R. and Batory, Don},
 title = {Fitting the Pieces Together: A Machine-checked Model of Safe Composition},
 booktitle = {Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
 series = {ESEC/FSE '09},
 year = {2009},
 isbn = {978-1-60558-001-2},
 location = {Amsterdam, The Netherlands},
 pages = {243--252},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1595696.1595733},
 doi = {10.1145/1595696.1595733},
 acmid = {1595733},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {feature models, product lines, type safety},
} 

@inproceedings{bracha-ecoop1990,
 author = {Bracha, Gilad and Cook, William},
 title = {Mixin-based Inheritance},
 booktitle = {Proceedings of the European Conference on Object-oriented Programming on Object-oriented Programming Systems, Languages, and Applications},
 series = {OOPSLA/ECOOP '90},
 year = {1990},
 isbn = {0-89791-411-2},
 location = {Ottawa, Canada},
 pages = {303--311},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/97945.97982},
 doi = {10.1145/97945.97982},
 acmid = {97982},
 publisher = {ACM},
 address = {New York, NY, USA},
} 


@ARTICLE{batory-tse2004, 
author={D. Batory and J. N. Sarvela and A. Rauschmayer}, 
journal={IEEE Transactions on Software Engineering}, 
title={Scaling step-wise refinement}, 
year={2004}, 
volume={30}, 
number={6}, 
pages={355-371}, 
doi={10.1109/TSE.2004.23}, 
ISSN={0098-5589}, 
month={June}}

@inproceedings{prehofer_feature-oriented_1997,
	title = {Feature-oriented programming: {A} fresh look at objects},
	shorttitle = {Feature-oriented programming},
	url = {https://link.springer.com/chapter/10.1007/BFb0053389},
	doi = {10.1007/BFb0053389},
	language = {en},
	urldate = {2017-05-27},
	booktitle = {{ECOOP}'97 — {Object}-{Oriented} {Programming}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Prehofer, Christian},
	month = jun,
	year = {1997},
	pages = {419--443},
	file = {Snapshot:C\:\\Users\\pedroabreu\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\lhxyz6dj.default\\zotero\\storage\\D5U7N8XR\\10.html:text/html}
}

@inproceedings{apel_feature_2008,
	address = {New York, NY, USA},
	series = {{GPCE} '08},
	title = {Feature {Featherweight} {Java}: {A} {Calculus} for {Feature}-oriented {Programming} and {Stepwise} {Refinement}},
	isbn = {978-1-60558-267-2},
	shorttitle = {Feature {Featherweight} {Java}},
	url = {http://doi.acm.org/10.1145/1449913.1449931},
	doi = {10.1145/1449913.1449931},
	urldate = {2017-05-27},
	booktitle = {Proceedings of the 7th {International} {Conference} on {Generative} {Programming} and {Component} {Engineering}},
	publisher = {ACM},
	author = {Apel, Sven and K\"astner, Christian and Lengauer, Christian},
	year = {2008},
	keywords = {featherweight java, feature-oriented programming, safe feature composition, stepwise refinement, type systems},
	pages = {101--112}
}

@article{igarashi_featherweight_2001,
	title = {Featherweight {Java}: {A} {Minimal} {Core} {Calculus} for {Java} and {GJ}},
	volume = {23},
	issn = {0164-0925},
	shorttitle = {Featherweight {Java}},
	url = {http://doi.acm.org/10.1145/503502.503505},
	doi = {10.1145/503502.503505},
	number = {3},
	urldate = {2017-05-27},
	journal = {ACM Trans. Program. Lang. Syst.},
	author = {Igarashi, Atsushi and Pierce, Benjamin C. and Wadler, Philip},
	month = may,
	year = {2001},
	keywords = {Compilation, generic classes, Java, language design, language semantics},
	pages = {396--450}
}

@inproceedings{batory_tutorial_2003,
	address = {Washington, DC, USA},
	series = {{ICSE} '03},
	title = {A {Tutorial} on {Feature} {Oriented} {Programming} and {Product}-lines},
	isbn = {978-0-7695-1877-0},
	url = {http://dl.acm.org/citation.cfm?id=776816.776935},
	urldate = {2017-05-27},
	booktitle = {Proceedings of the 25th {International} {Conference} on {Software} {Engineering}},
	publisher = {IEEE Computer Society},
	author = {Batory, Don},
	year = {2003},
	pages = {753--754}
}


@inproceedings{batory_jts:_1998,
	title = {{JTS}: tools for implementing domain-specific languages},
	shorttitle = {{JTS}},
	doi = {10.1109/ICSR.1998.685739},
	booktitle = {Proceedings. {Fifth} {International} {Conference} on {Software} {Reuse} ({Cat}. {No}.98TB100203)},
	author = {Batory, D. and Lofaso, B. and Smaragdakis, Y.},
	month = jun,
	year = {1998},
	keywords = {compiler generators, component-based generators, Computer languages, cost, Costs, Data structures, domain-independent tools, domain-specific languages, Domain specific languages, DSL, generator development, GenVoca generators, high level languages, industrial programming languages, Jakarta Tool Suite, Java, JTS, precompiler-compiler tools, Productivity, programming environments, Programming profession, Program processors, Software maintenance, software reusability, software reuse, software tools},
	pages = {143--153},
	file = {IEEE Xplore Abstract Record:D\:\\Users\\x01205375163\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\cxvkzn0h.default-1473962059047\\zotero\\storage\\XXB9C9SJ\\685739.html:text/html}
}

@inproceedings{batory_achieving_2000,
	title = {Achieving {Extensibility} through {Product}-{Lines} and {Domain}-{Specific} {Languages}: {A} {Case} {Study}},
	shorttitle = {Achieving {Extensibility} through {Product}-{Lines} and {Domain}-{Specific} {Languages}},
	url = {https://link.springer.com/chapter/10.1007/978-3-540-44995-9_8},
	doi = {10.1007/978-3-540-44995-9_8},
	language = {en},
	urldate = {2017-05-31},
	booktitle = {Software {Reuse}: {Advances} in {Software} {Reusability}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Batory, Don and Johnson, Clay and MacDonald, Bob and Heeder, Dale von},
	month = jun,
	year = {2000},
	pages = {117--136},
	file = {Snapshot:D\:\\Users\\x01205375163\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\cxvkzn0h.default-1473962059047\\zotero\\storage\\WT56WA7F\\978-3-540-44995-9_8.html:text/html}
}

@article{batory_design_1992,
	title = {The {Design} and {Implementation} of {Hierarchical} {Software} {Systems} with {Reusable} {Components}},
	volume = {1},
	issn = {1049-331X},
	url = {http://doi.acm.org/10.1145/136586.136587},
	doi = {10.1145/136586.136587},
	number = {4},
	urldate = {2017-05-31},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Batory, Don and O'Malley, Sean},
	month = oct,
	year = {1992},
	keywords = {domain modeling, open system architectures, reuse, software building-blocks, software design},
	pages = {355--398}
}

@inproceedings{kurt_stirewalt_component-based_2001,
	address = {Washington, DC, USA},
	series = {{ICSE} '01},
	title = {A {Component}-based {Approach} to {Building} {Formal} {Analysis} {Tools}},
	isbn = {978-0-7695-1050-7},
	url = {http://dl.acm.org/citation.cfm?id=381473.381491},
	urldate = {2017-05-31},
	booktitle = {Proceedings of the 23rd {International} {Conference} on {Software} {Engineering}},
	publisher = {IEEE Computer Society},
	author = {Kurt Stirewalt, R. E. and Dillon, Laura K.},
	year = {2001},
	pages = {167--176}
}


@inproceedings{batory_feature-oriented_2004,
	title = {Feature-oriented programming and the {AHEAD} tool suite},
	doi = {10.1109/ICSE.2004.1317496},
	booktitle = {Proceedings. 26th {International} {Conference} on {Software} {Engineering}},
	author = {Batory, D.},
	month = may,
	year = {2004},
	keywords = {AHEAD tool suite, Algebra, application analysis, application optimization, Application software, application synthesis, Automatic programming, declarative specifications, Design optimization, Domain specific languages, feature-oriented programming, FOP technology, Java, Large-scale systems, object-oriented programming, Prototypes, Query processing, Software engineering, software tools, target application},
	pages = {702--703},
	file = {IEEE Xplore Abstract Record:D\:\\Users\\x01205375163\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\cxvkzn0h.default-1473962059047\\zotero\\storage\\5T4XAXSN\\1317496.html:text/html}
}

@inproceedings{apel_superimposition:_2008,
	title = {Superimposition: {A} {Language}-{Independent} {Approach} to {Software} {Composition}},
	shorttitle = {Superimposition},
	url = {https://link.springer.com/chapter/10.1007/978-3-540-78789-1_2},
	doi = {10.1007/978-3-540-78789-1_2},
	language = {en},
	urldate = {2017-05-31},
	booktitle = {Software {Composition}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Apel, Sven and Lengauer, Christian},
	month = mar,
	year = {2008},
	pages = {20--35},
	file = {Snapshot:D\:\\Users\\x01205375163\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\cxvkzn0h.default-1473962059047\\zotero\\storage\\3IRFH4QQ\\978-3-540-78789-1_2.html:text/html}
}

@inproceedings{apel_featurec++:_2005,
	title = {{FeatureC}++: {On} the {Symbiosis} of {Feature}-{Oriented} and {Aspect}-{Oriented} {Programming}},
	shorttitle = {{FeatureC}++},
	url = {https://link.springer.com/chapter/10.1007/11561347_10},
	doi = {10.1007/11561347_10},
	language = {en},
	urldate = {2017-05-31},
	booktitle = {Generative {Programming} and {Component} {Engineering}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Apel, Sven and Leich, Thomas and Rosenmüller, Marko and Saake, Gunter},
	month = sep,
	year = {2005},
	pages = {125--140},
	file = {Snapshot:D\:\\Users\\x01205375163\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\cxvkzn0h.default-1473962059047\\zotero\\storage\\ITQP2CPZ\\11561347_10.html:text/html}
}

@inproceedings{schaefer_delta-oriented_2010,
	title = {Delta-{Oriented} {Programming} of {Software} {Product} {Lines}},
	url = {https://link.springer.com/chapter/10.1007/978-3-642-15579-6_6},
	doi = {10.1007/978-3-642-15579-6_6},
	language = {en},
	urldate = {2017-05-31},
	booktitle = {Software {Product} {Lines}: {Going} {Beyond}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Schaefer, Ina and Bettini, Lorenzo and Bono, Viviana and Damiani, Ferruccio and Tanzarella, Nico},
	month = sep,
	year = {2010},
	pages = {77--91},
	file = {Snapshot:D\:\\Users\\x01205375163\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\cxvkzn0h.default-1473962059047\\zotero\\storage\\3GND2ZIS\\978-3-642-15579-6_6.html:text/html}
}


@inproceedings{delaware_machine-checked_2009,
	address = {New York, NY, USA},
	series = {{FOAL} '09},
	title = {A {Machine}-checked {Model} of {Safe} {Composition}},
	isbn = {978-1-60558-452-2},
	url = {http://doi.acm.org/10.1145/1509837.1509846},
	doi = {10.1145/1509837.1509846},
	abstract = {Programs of a software product line can be synthesized by composing features which implement some unit of program functionality. In most product lines, only some combination of features are meaningful; feature models express the high-level domain constraints that govern feature compatibility. Product line developers also face the problem of safe composition -- whether every product allowed by a feature model is type-safe when compiled and run. To study the problem of safe composition, we present Lightweight Feature Java (LFJ), an extension of Lightweight Java with support for features. We define a constraint-based type system for LFJ and prove its soundness using a full formalization of LFJ in Coq. In LFJ, soundness means that any composition of features that satisfies the typing constraints will generate a well-formed LJ program. If the constraints of a feature model imply these typing constraints then all programs allowed by the feature model are type-safe.},
	urldate = {2017-07-25},
	booktitle = {Proceedings of the 2009 {Workshop} on {Foundations} of {Aspect}-oriented {Languages}},
	publisher = {ACM},
	author = {Delaware, Benjamin and Cook, William and Batory, Don},
	year = {2009},
	keywords = {feature model, product lines, type safety},
	pages = {31--35}
}


@inproceedings{ferreira_making_2012,
	title = {Making {Software} {Product} {Line} {Evolution} {Safer}},
	doi = {10.1109/SBCARS.2012.18},
	abstract = {Developers evolve software product lines (SPLs) manually or using typical program refactoring tools. However, when evolving a product line to introduce new features or to improve its design, it is important to make sure that the behavior of existing products is not affected. Typical program refactorings cannot guarantee that because the SPL context goes beyond code and other kinds of core assets, and involves additional artifacts such as feature models and configuration knowledge. Besides that, in a SPL we typically have to deal with a set of possibly alternative assets that do not constitute a well-formed program. As a result, manual changes and existing program refactoring tools may introduce behavioral changes or invalidate existing product configurations. To avoid that, we propose approaches and implement tools for making product line evolution safer; these tools check whether SPL transformations are refinements in the sense that they preserve the behavior of the original SPL products. They implement different and practical approximations of a formal definition of SPL refinement. We evaluate the approaches in concrete SPL evolution scenarios where existing product's behavior must be preserved. However, our tools found that some transformations introduced behavioral changes. Moreover, we evaluate defective refinements, and the toolset detects the behavioral changes.},
	booktitle = {2012 {Sixth} {Brazilian} {Symposium} on {Software} {Components}, {Architectures} and {Reuse}},
	author = {Ferreira, F. and Borba, P. and Soares, G. and Gheyi, R.},
	month = sep,
	year = {2012},
	keywords = {approximation theory, Bluetooth, checking tools, defective refinement evaluation, design improvement, formal definition approximations, formal verification, Frequency modulation, Games, Internet, Optimization, product configurations, Productivity, product line evolution, program diagnostics, program refactoring tools, refactoring, refinement, safe evolution, safe software product line evolution, Software, software behavioral changes, software development management, software maintenance, software process improvement, software product lines, software tools, SPL evolution, SPL refinement, SPL transformations},
	pages = {21--30},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\pedroabreu\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\lhxyz6dj.default\\zotero\\storage\\TP4N9NFH\\6394971.html:text/html}
}


@inproceedings{kastner_type-checking_2008,
	title = {Type-{Checking} {Software} {Product} {Lines} - {A} {Formal} {Approach}},
	doi = {10.1109/ASE.2008.36},
	abstract = {A software product line (SPL) is an efficient means to generate a family of program variants for a domain from a single code base. However, because of the potentially high number of possible program variants, it is difficult to test all variants and ensure properties like type-safety for the entire SPL. While first steps to type-check an entire SPL have been taken, they are informal and incomplete. In this paper, we extend the Featherweight Java (FJ) calculus with feature annotations to be used for SPLs. By extending FJ's type system, we guarantee that - given a well-typed SPL - all possible program variants are well- typed as well. We show how results from this formalization reflect and help implementing our own language-independent SPL tool CIDE.},
	booktitle = {2008 23rd {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	author = {Kastner, C. and Apel, S.},
	month = sep,
	year = {2008},
	keywords = {Calculus, Computer science, Featherweight Java calculus, feature annotation, formal approach, Gears, Informatics, Java, Mathematics, process algebra, program variants, software product lines, Spatial databases, Testing, Transaction databases, type checking, type safety, type system, type theory},
	pages = {258--267},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\pedroabreu\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\lhxyz6dj.default\\zotero\\storage\\C9G56TKP\\4639329.html:text/html}
}


@inproceedings{delaware_machine-checked_2009,
  address = {New York, NY, USA},
  series = {{FOAL} '09},
  title = {A {Machine}-checked {Model} of {Safe} {Composition}},
  isbn = {978-1-60558-452-2},
  url = {http://doi.acm.org/10.1145/1509837.1509846},
  doi = {10.1145/1509837.1509846},
  abstract = {Programs of a software product line can be synthesized by composing features which implement some unit of program functionality. In most product lines, only some combination of features are meaningful; feature models express the high-level domain constraints that govern feature compatibility. Product line developers also face the problem of safe composition -- whether every product allowed by a feature model is type-safe when compiled and run. To study the problem of safe composition, we present Lightweight Feature Java (LFJ), an extension of Lightweight Java with support for features. We define a constraint-based type system for LFJ and prove its soundness using a full formalization of LFJ in Coq. In LFJ, soundness means that any composition of features that satisfies the typing constraints will generate a well-formed LJ program. If the constraints of a feature model imply these typing constraints then all programs allowed by the feature model are type-safe.},
  urldate = {2017-07-25},
  booktitle = {Proceedings of the 2009 {Workshop} on {Foundations} of {Aspect}-oriented {Languages}},
  publisher = {ACM},
  author = {Delaware, Benjamin and Cook, William and Batory, Don},
  year = {2009},
  keywords = {feature model, product lines, type safety},
  pages = {31--35}
}

@inproceedings{ferreira_making_2012,
  title = {Making {Software} {Product} {Line} {Evolution} {Safer}},
  doi = {10.1109/SBCARS.2012.18},
  abstract = {Developers evolve software product lines (SPLs) manually or using typical program refactoring tools. However, when evolving a product line to introduce new features or to improve its design, it is important to make sure that the behavior of existing products is not affected. Typical program refactorings cannot guarantee that because the SPL context goes beyond code and other kinds of core assets, and involves additional artifacts such as feature models and configuration knowledge. Besides that, in a SPL we typically have to deal with a set of possibly alternative assets that do not constitute a well-formed program. As a result, manual changes and existing program refactoring tools may introduce behavioral changes or invalidate existing product configurations. To avoid that, we propose approaches and implement tools for making product line evolution safer; these tools check whether SPL transformations are refinements in the sense that they preserve the behavior of the original SPL products. They implement different and practical approximations of a formal definition of SPL refinement. We evaluate the approaches in concrete SPL evolution scenarios where existing product's behavior must be preserved. However, our tools found that some transformations introduced behavioral changes. Moreover, we evaluate defective refinements, and the toolset detects the behavioral changes.},
  booktitle = {2012 {Sixth} {Brazilian} {Symposium} on {Software} {Components}, {Architectures} and {Reuse}},
  author = {Ferreira, F. and Borba, P. and Soares, G. and Gheyi, R.},
  month = sep,
  year = {2012},
  keywords = {approximation theory, Bluetooth, checking tools, defective refinement evaluation, design improvement, formal definition approximations, formal verification, Frequency modulation, Games, Internet, Optimization, product configurations, Productivity, product line evolution, program diagnostics, program refactoring tools, refactoring, refinement, safe evolution, safe software product line evolution, Software, software behavioral changes, software development management, software maintenance, software process improvement, software product lines, software tools, SPL evolution, SPL refinement, SPL transformations},
  pages = {21--30},
  file = {IEEE Xplore Abstract Record:C\:\\Users\\pedroabreu\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\lhxyz6dj.default\\zotero\\storage\\TP4N9NFH\\6394971.html:text/html}
}

@inproceedings{kastner_type-checking_2008,
  title = {Type-{Checking} {Software} {Product} {Lines} - {A} {Formal} {Approach}},
  doi = {10.1109/ASE.2008.36},
  abstract = {A software product line (SPL) is an efficient means to generate a family of program variants for a domain from a single code base. However, because of the potentially high number of possible program variants, it is difficult to test all variants and ensure properties like type-safety for the entire SPL. While first steps to type-check an entire SPL have been taken, they are informal and incomplete. In this paper, we extend the Featherweight Java (FJ) calculus with feature annotations to be used for SPLs. By extending FJ's type system, we guarantee that - given a well-typed SPL - all possible program variants are well- typed as well. We show how results from this formalization reflect and help implementing our own language-independent SPL tool CIDE.},
  booktitle = {2008 23rd {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
  author = {Kastner, C. and Apel, S.},
  month = sep,
  year = {2008},
  keywords = {Calculus, Computer science, Featherweight Java calculus, feature annotation, formal approach, Gears, Informatics, Java, Mathematics, process algebra, program variants, software product lines, Spatial databases, Testing, Transaction databases, type checking, type safety, type system, type theory},
  pages = {258--267},
  file = {IEEE Xplore Abstract Record:C\:\\Users\\pedroabreu\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\lhxyz6dj.default\\zotero\\storage\\C9G56TKP\\4639329.html:text/html}
}

@article{little1900xxx,
    title={XXX.—Non-Alternate$\pm$Knots},
    author={Little, CN},
    journal={Earth and Environmental Science Transactions of The Royal Society of Edinburgh},
    volume={39},
    number={3},
    pages={771--778},
    year={1900},
    publisher={Royal Society of Edinburgh Scotland Foundation}
}

@book{rolfsen1976knots,
    title={Knots and links},
    author={Rolfsen, Dale},
    volume={346},
    year={1976},
    publisher={American Mathematical Soc.}
}

@article{leroy2012compcert,
    title={The CompCert verified compiler},
    author={Leroy, Xavier and others},
    journal={Documentation and user’s manual. INRIA Paris-Rocquencourt},
    year={2012}
}

@inproceedings{arkoudas2004verifying,
    title={Verifying a file system implementation},
    author={Arkoudas, Konstantine and Zee, Karen and Kuncak, Viktor and Rinard, Martin},
    booktitle={International Conference on Formal Engineering Methods},
    pages={373--390},
    year={2004},
    organization={Springer}
}

@article{amani2015specifying,
    title={Specifying a realistic file system},
    author={Amani, Sidney and Murray, Toby},
    journal={arXiv preprint arXiv:1511.04169},
    year={2015}
}

@incollection{hartel2000formalising,
    title={Formalising Java Safety—An Overview},
    author={Hartel, Pieter H},
    booktitle={Smart Card Research and Advanced Applications},
    pages={115--134},
    year={2000},
    publisher={Springer}
}

@article{klein2006machine,
    title={A machine-checked model for a Java-like language, virtual machine, and compiler},
    author={Klein, Gerwin and Nipkow, Tobias},
    journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
    volume={28},
    number={4},
    pages={619--695},
    year={2006},
    publisher={ACM}
}


@inproceedings{delaware2009machine,
    title={A machine-checked model of safe composition},
    author={Delaware, Benjamin and Cook, William and Batory, Don},
    booktitle={Proceedings of the 2009 workshop on Foundations of aspect-oriented languages},
    pages={31--35},
    year={2009},
    organization={ACM}
}

@article{parnas1976design,
    title={On the design and development of program families},
    author={Parnas, David Lorge},
    journal={IEEE Transactions on software engineering},
    number={1},
    pages={1--9},
    year={1976},
    publisher={IEEE}
}

@book{Sommerville:2010:SE:1841764,
   author = {Sommerville, Ian},
   title = {Software Engineering},
   year = {2010},
   isbn = {0137035152, 9780137035151},
   edition = {9th},
   publisher = {Addison-Wesley Publishing Company},
   address = {USA},
} 

@inproceedings{torgersen2004expression,
  title={The expression problem revisited},
  author={Torgersen, Mads},
  booktitle={European Conference on Object-Oriented Programming},
  pages={123--146},
  year={2004},
  organization={Springer}
}

@article{neves2012investigating,
  title={Investigating the safe evolution of software product lines},
  author={Neves, La{\'\i}s and Teixeira, Leopoldo and Sena, Dem{\'o}stenes and Alves, Vander and Kulezsa, Uir{\'a} and Borba, Paulo},
  journal={ACM SIGPLAN Notices},
  volume={47},
  number={3},
  pages={33--42},
  year={2012},
  publisher={ACM}
}

@article{apel2010type,
  title={Type safety for feature-oriented product lines},
  author={Apel, Sven and K{\"a}stner, Christian and Gr{\"o}{\ss}linger, Armin and Lengauer, Christian},
  journal={Automated Software Engineering},
  volume={17},
  number={3},
  pages={251--300},
  year={2010},
  publisher={Springer}
}